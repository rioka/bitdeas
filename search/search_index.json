{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to my tech notes Tech notes, snippets, thoughts, ideas, things I'm too old to remember... Long story short, whatever can make me stay awake, just because I'm curious!","title":"Welcome to my tech notes"},{"location":"#welcome-to-my-tech-notes","text":"Tech notes, snippets, thoughts, ideas, things I'm too old to remember... Long story short, whatever can make me stay awake, just because I'm curious!","title":"Welcome to my tech notes"},{"location":"GIT/aliases/","text":"Some aliases Note Aliases are saved in .gitconfig , in user home folder, e.g. %UserProfile% in Windows, or ~ in Linux. Here are some common aliases I use Entry Description st = status Shortcut for git status cl = clone Shortcut for git clone co = checkout Shortcut for git checkout ci = commit Shortcut for git commit com = checkout master Shortcut for git checkout master cob = checkout -b Shortcut for git checkout -b ; create a branch and check it out delb = branch -D Delete a branch pl = pull Shortcut for git pull plp = pull --prune Pull and prune local branches ps = push Shortcut for git push psup = push Shortcut for git push upstream origin ; push and create branch in remote origin lo1g = log --oneline --graph lobd = log --branches --date-order showalias = config --get-regexp alias unstage = reset HEAD -- delete last commit, but keep file; so you get back 1 commit, but do not lose anything mt = mergetool Run mergetool to solve conflicts","title":"Some aliases"},{"location":"GIT/aliases/#some-aliases","text":"Note Aliases are saved in .gitconfig , in user home folder, e.g. %UserProfile% in Windows, or ~ in Linux. Here are some common aliases I use Entry Description st = status Shortcut for git status cl = clone Shortcut for git clone co = checkout Shortcut for git checkout ci = commit Shortcut for git commit com = checkout master Shortcut for git checkout master cob = checkout -b Shortcut for git checkout -b ; create a branch and check it out delb = branch -D Delete a branch pl = pull Shortcut for git pull plp = pull --prune Pull and prune local branches ps = push Shortcut for git push psup = push Shortcut for git push upstream origin ; push and create branch in remote origin lo1g = log --oneline --graph lobd = log --branches --date-order showalias = config --get-regexp alias unstage = reset HEAD -- delete last commit, but keep file; so you get back 1 commit, but do not lose anything mt = mergetool Run mergetool to solve conflicts","title":"Some aliases"},{"location":"GIT/quick-reference/","text":"Quick reference Quick recap and reminder of most frequently (by me!) used GIT commands How to... Clean working directory git clean delete files which are not part of git. Main cptions Option Description -f Delete files from the repository -fd Delete files and folders from the repository -n , -dry-run dry run : Print out the list of files which will be removed -X Remove ignored (ie files in .gitignore ) files -x Remove ignored and non-ignored (ie manually created ones) files Delete a branch git branch -d name_of_branch Remove a remote branch git push origin --delete the_remote_branch Ccreate a branch from a given source git checkout -b name-of-new-branch name-of-source-branch Create a new branch from changes in current branch #first, stash changes git stash save <message> #then create a new branch from that stash git stash branch name-of-new-branch stash@{0} Or simply # create and checkout a new branch keeping all changes in the previously current branch git checkout -b name-of-new-branch Rename a branch Rename current branch # on branch to be renamed git branch -m new-name Rename a different (i.e. not current) branch # from a different branch git branch -m old-name new-name Then # delete the old-name remote branch and push the new-name local branch # local branch will have no upstream after this command git push origin :old-name new-name # reset the upstream branch for the new-name local branch: switch to the branch and then git push origin -u new-name Checkout a tag Checkout a specific tag git checkout tags/name-of-tag List tags List tags # --list can be omitted git tag --list List tags matching a pattern # list all tags starting with \"v-\" git tag --list 'v-*' Create a tag Create an annotated tag git tag -a name-of-tag -m \"<message>\" Stash changes git stash save -m \"<message>\" Check stash View content of a stash # show content of second-to-last stash git stash show -p [stash@{1}] View content of stash, filename only # show filename of files stashed (second-to-last stash) git stash show [stash@{1}] --name-only Apply stash Apply a stash git stash pop stash@{1} Search for a commit # search in all git history git grep <regexp> $(git rev-list --all) Unstage a file git reset /path/to/file Revert committed changes in a file ```bash git checkout /path/to/file revert last commit git revert HEAD revert specific commits git revert [ ] ```bash","title":"Quick reference"},{"location":"GIT/quick-reference/#quick-reference","text":"Quick recap and reminder of most frequently (by me!) used GIT commands","title":"Quick reference"},{"location":"GIT/quick-reference/#how-to","text":"","title":"How to..."},{"location":"GIT/quick-reference/#clean-working-directory","text":"git clean delete files which are not part of git. Main cptions Option Description -f Delete files from the repository -fd Delete files and folders from the repository -n , -dry-run dry run : Print out the list of files which will be removed -X Remove ignored (ie files in .gitignore ) files -x Remove ignored and non-ignored (ie manually created ones) files","title":"Clean working directory"},{"location":"GIT/quick-reference/#delete-a-branch","text":"git branch -d name_of_branch","title":"Delete a branch"},{"location":"GIT/quick-reference/#remove-a-remote-branch","text":"git push origin --delete the_remote_branch","title":"Remove a remote branch"},{"location":"GIT/quick-reference/#ccreate-a-branch-from-a-given-source","text":"git checkout -b name-of-new-branch name-of-source-branch","title":"Ccreate a branch from a given source"},{"location":"GIT/quick-reference/#create-a-new-branch-from-changes-in-current-branch","text":"#first, stash changes git stash save <message> #then create a new branch from that stash git stash branch name-of-new-branch stash@{0} Or simply # create and checkout a new branch keeping all changes in the previously current branch git checkout -b name-of-new-branch","title":"Create a new branch from changes in current branch"},{"location":"GIT/quick-reference/#rename-a-branch","text":"Rename current branch # on branch to be renamed git branch -m new-name Rename a different (i.e. not current) branch # from a different branch git branch -m old-name new-name Then # delete the old-name remote branch and push the new-name local branch # local branch will have no upstream after this command git push origin :old-name new-name # reset the upstream branch for the new-name local branch: switch to the branch and then git push origin -u new-name","title":"Rename a branch"},{"location":"GIT/quick-reference/#checkout-a-tag","text":"Checkout a specific tag git checkout tags/name-of-tag","title":"Checkout a tag"},{"location":"GIT/quick-reference/#list-tags","text":"List tags # --list can be omitted git tag --list List tags matching a pattern # list all tags starting with \"v-\" git tag --list 'v-*'","title":"List tags"},{"location":"GIT/quick-reference/#create-a-tag","text":"Create an annotated tag git tag -a name-of-tag -m \"<message>\"","title":"Create a tag"},{"location":"GIT/quick-reference/#stash-changes","text":"git stash save -m \"<message>\"","title":"Stash changes"},{"location":"GIT/quick-reference/#check-stash","text":"View content of a stash # show content of second-to-last stash git stash show -p [stash@{1}] View content of stash, filename only # show filename of files stashed (second-to-last stash) git stash show [stash@{1}] --name-only","title":"Check stash"},{"location":"GIT/quick-reference/#apply-stash","text":"Apply a stash git stash pop stash@{1}","title":"Apply stash"},{"location":"GIT/quick-reference/#search-for-a-commit","text":"# search in all git history git grep <regexp> $(git rev-list --all)","title":"Search for a commit"},{"location":"GIT/quick-reference/#unstage-a-file","text":"git reset /path/to/file","title":"Unstage a file"},{"location":"GIT/quick-reference/#revert-committed-changes-in-a-file","text":"```bash git checkout /path/to/file","title":"Revert committed changes in a file"},{"location":"GIT/quick-reference/#revert-last-commit","text":"git revert HEAD","title":"revert last commit"},{"location":"GIT/quick-reference/#revert-specific-commits","text":"git revert [ ] ```bash","title":"revert specific commits"},{"location":"code-snippets/check-object-exists-in-db/","text":"Check if a table exists There are many ways to check for a table Use INFORMATION_SCHEMA.TABLES IF EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE SCHEMA_NAME = N'orders' AND TABLE_NAME = N'Customers') BEGIN -- do something END Use OBJECT_ID IF OBJECT_ID(N'orders.Customers', N'U') IS NOT NULL BEGIN -- do something END Use Using sys.objects Catalog View IF EXISTS(SELECT 1 FROM sys.objects WHERE object_id = OBJECT_ID(N'orders.Customers') AND [type] = N'U') BEGIN -- do something END Use Using sys.tables Catalog View IF EXISTS(SELECT 1 FROM sys.tables T INNER JOIN sys.schemas S ON T.schema_id = S.schema_id WHERE T.[name] = N'Customers') AND T.[type] = N'U' AND S.[name] = N'orders') BEGIN -- do something END *We can skip JOIN if there if database has just one schema, or tables have unique names.* Using sys.sysobjects Should be avoided, as sys.sysobjects is being deprecated.","title":"Check if an object exists in a database"},{"location":"code-snippets/check-object-exists-in-db/#check-if-a-table-exists","text":"There are many ways to check for a table","title":"Check if a table exists"},{"location":"code-snippets/check-object-exists-in-db/#use-information_schematables","text":"IF EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE SCHEMA_NAME = N'orders' AND TABLE_NAME = N'Customers') BEGIN -- do something END","title":"Use INFORMATION_SCHEMA.TABLES"},{"location":"code-snippets/check-object-exists-in-db/#use-object_id","text":"IF OBJECT_ID(N'orders.Customers', N'U') IS NOT NULL BEGIN -- do something END","title":"Use OBJECT_ID"},{"location":"code-snippets/check-object-exists-in-db/#use-using-sysobjects-catalog-view","text":"IF EXISTS(SELECT 1 FROM sys.objects WHERE object_id = OBJECT_ID(N'orders.Customers') AND [type] = N'U') BEGIN -- do something END","title":"Use Using sys.objects Catalog View"},{"location":"code-snippets/check-object-exists-in-db/#use-using-systables-catalog-view","text":"IF EXISTS(SELECT 1 FROM sys.tables T INNER JOIN sys.schemas S ON T.schema_id = S.schema_id WHERE T.[name] = N'Customers') AND T.[type] = N'U' AND S.[name] = N'orders') BEGIN -- do something END *We can skip JOIN if there if database has just one schema, or tables have unique names.*","title":"Use Using sys.tables Catalog View"},{"location":"code-snippets/check-object-exists-in-db/#using-syssysobjects","text":"Should be avoided, as sys.sysobjects is being deprecated.","title":"Using sys.sysobjects"},{"location":"code-snippets/manage-binary-content-from-database/","text":"Insert, update and extract a BLOB using T-SQL only Insert a BLOB /* Create a table with a VARBINARY column */ CREATE TABLE Documents( [FileName] NVARCHAR(60), [FileType NVARCHAR(60), [Content] VARBINARY(max) ) GO INSERT INTO Documents( [FileName], [FileType], [Content] ) SELECT N'Text1.txt' AS [FileName], N'.txt' AS [FileType], * FROM OPENROWSET(BULK N'C:\\path\\to\\Text1.txt', SINGLE_BLOB) AS [Content] GO Update content of a VARBINARY column Assuming the same table as in the sample above UPDATE Documents SET Content = (SELECT * FROM OPENROWSET(BULK N'c:\\path\\to\\20180520215030133.docx', SINGLE_BLOB) AS T) WHERE [FileName] = N'Doc1.docx' Save content to file Use this code to save the content of a blob (varbinary or image) into a file, using T-SQL only. Requirements sp_configure 'show advanced options', 1; GO RECONFIGURE; GO sp_configure 'Ole Automation Procedures', 1; GO RECONFIGURE; GO Code DECLARE @rawData VARBINARY(MAX), @timestamp VARCHAR(MAX), @objectToken INT /* sample select */ DECLARE IMGPATH CURSOR FAST_FORWARD FOR SELECT Content FROM [dbName].dbo.Reports WHERE id = 7140 OPEN IMGPATH FETCH NEXT FROM IMGPATH INTO @rawData WHILE @@FETCH_STATUS = 0 BEGIN SET @timestamp = 'c:\\path\\to\\folder\\' + REPLACE(REPLACE(REPLACE(REPLACE(CONVERT(VARCHAR, GETDATE(), 121), '-', ''), ':', ''), '.', ''), ' ', '') + '.docx' PRINT @timestamp EXEC sp_OACreate 'ADODB.Stream', @objectToken OUTPUT EXEC sp_OASetProperty @objectToken, 'Type', 1 EXEC sp_OAMethod @objectToken, 'Open' EXEC sp_OAMethod @objectToken, 'Write', NULL, @rawData EXEC sp_OAMethod @objectToken, 'SaveToFile', NULL, @timetamp, 2 EXEC sp_OAMethod @objectToken, 'Close' EXEC sp_OADestroy @objectToken FETCH NEXT FROM IMGPATH INTO @rawData END CLOSE IMGPATH DEALLOCATE IMGPATH","title":"Manage VARBINARY column via T-SQL"},{"location":"code-snippets/manage-binary-content-from-database/#insert-update-and-extract-a-blob-using-t-sql-only","text":"","title":"Insert, update and extract a BLOB using T-SQL only"},{"location":"code-snippets/manage-binary-content-from-database/#insert-a-blob","text":"/* Create a table with a VARBINARY column */ CREATE TABLE Documents( [FileName] NVARCHAR(60), [FileType NVARCHAR(60), [Content] VARBINARY(max) ) GO INSERT INTO Documents( [FileName], [FileType], [Content] ) SELECT N'Text1.txt' AS [FileName], N'.txt' AS [FileType], * FROM OPENROWSET(BULK N'C:\\path\\to\\Text1.txt', SINGLE_BLOB) AS [Content] GO","title":"Insert a BLOB"},{"location":"code-snippets/manage-binary-content-from-database/#update-content-of-a-varbinary-column","text":"Assuming the same table as in the sample above UPDATE Documents SET Content = (SELECT * FROM OPENROWSET(BULK N'c:\\path\\to\\20180520215030133.docx', SINGLE_BLOB) AS T) WHERE [FileName] = N'Doc1.docx'","title":"Update content of a VARBINARY column"},{"location":"code-snippets/manage-binary-content-from-database/#save-content-to-file","text":"Use this code to save the content of a blob (varbinary or image) into a file, using T-SQL only.","title":"Save content to file"},{"location":"code-snippets/manage-binary-content-from-database/#requirements","text":"sp_configure 'show advanced options', 1; GO RECONFIGURE; GO sp_configure 'Ole Automation Procedures', 1; GO RECONFIGURE; GO","title":"Requirements"},{"location":"code-snippets/manage-binary-content-from-database/#code","text":"DECLARE @rawData VARBINARY(MAX), @timestamp VARCHAR(MAX), @objectToken INT /* sample select */ DECLARE IMGPATH CURSOR FAST_FORWARD FOR SELECT Content FROM [dbName].dbo.Reports WHERE id = 7140 OPEN IMGPATH FETCH NEXT FROM IMGPATH INTO @rawData WHILE @@FETCH_STATUS = 0 BEGIN SET @timestamp = 'c:\\path\\to\\folder\\' + REPLACE(REPLACE(REPLACE(REPLACE(CONVERT(VARCHAR, GETDATE(), 121), '-', ''), ':', ''), '.', ''), ' ', '') + '.docx' PRINT @timestamp EXEC sp_OACreate 'ADODB.Stream', @objectToken OUTPUT EXEC sp_OASetProperty @objectToken, 'Type', 1 EXEC sp_OAMethod @objectToken, 'Open' EXEC sp_OAMethod @objectToken, 'Write', NULL, @rawData EXEC sp_OAMethod @objectToken, 'SaveToFile', NULL, @timetamp, 2 EXEC sp_OAMethod @objectToken, 'Close' EXEC sp_OADestroy @objectToken FETCH NEXT FROM IMGPATH INTO @rawData END CLOSE IMGPATH DEALLOCATE IMGPATH","title":"Code"},{"location":"code-snippets/map-error-message-to-code/","text":"Get SQL Server error code from an error message Sometimes you want to get the error code for a gioven error message, e.g. to add custom error handling code; the following statement can be used to retrieve the error code(s) matching an error message. DECLARE @errorMsg NVARCHAR(100), @langId INT SET @errorMsg = '%duplicate%'; /* set a specific language, if known */ SET langId = 1033 SELECT * FROM [sys.messages] WHERE [text] LIKE @errorMsg -- and [text] like '%key%' AND ([language_id] = @langId OR @langId IS NULL)","title":"Get SQL Server error code from message"},{"location":"code-snippets/map-error-message-to-code/#get-sql-server-error-code-from-an-error-message","text":"Sometimes you want to get the error code for a gioven error message, e.g. to add custom error handling code; the following statement can be used to retrieve the error code(s) matching an error message. DECLARE @errorMsg NVARCHAR(100), @langId INT SET @errorMsg = '%duplicate%'; /* set a specific language, if known */ SET langId = 1033 SELECT * FROM [sys.messages] WHERE [text] LIKE @errorMsg -- and [text] like '%key%' AND ([language_id] = @langId OR @langId IS NULL)","title":"Get SQL Server error code from an error message"},{"location":"sql-server/get-schema-details/","text":"How to Get Information About Schemas Both INFORMATION_SCHEMA.TABLES and sys.* are views. Their definitions are available in OBJECT_DEFINITION SELECT OBJECT_DEFINITION(OBJECT_ID('INFORMATION_SCHEMA.TABLES')) SELECT OBJECT_DEFINITION(OBJECT_ID('sys.tables')) SELECT OBJECT_DEFINITION(OBJECT_ID('sys.schemas')) When you run a query against INFORMATION_SCHEMA.TABLES , you're actually running a query against a simplified version of sys.objects and sys.schemas . So instead of schema.Tables , we can use sys_table .","title":"Get schema details"},{"location":"sql-server/get-schema-details/#how-to-get-information-about-schemas","text":"Both INFORMATION_SCHEMA.TABLES and sys.* are views. Their definitions are available in OBJECT_DEFINITION SELECT OBJECT_DEFINITION(OBJECT_ID('INFORMATION_SCHEMA.TABLES')) SELECT OBJECT_DEFINITION(OBJECT_ID('sys.tables')) SELECT OBJECT_DEFINITION(OBJECT_ID('sys.schemas')) When you run a query against INFORMATION_SCHEMA.TABLES , you're actually running a query against a simplified version of sys.objects and sys.schemas . So instead of schema.Tables , we can use sys_table .","title":"How to Get Information About Schemas"},{"location":"sql-server/versions/","text":"SQL Server versions Here is a list of SQL Server versions, and related commercial product Version Product 8 SQL Server 2000 9 SQL Server 2005 10 SQL Server 2008 11 SQL Server 2012 12 SQL Server 2014 13 SQL Server 2016 14 SQL Server 2017 15 SQL Server 2019","title":"Versions"},{"location":"sql-server/versions/#sql-server-versions","text":"Here is a list of SQL Server versions, and related commercial product Version Product 8 SQL Server 2000 9 SQL Server 2005 10 SQL Server 2008 11 SQL Server 2012 12 SQL Server 2014 13 SQL Server 2016 14 SQL Server 2017 15 SQL Server 2019","title":"SQL Server versions"},{"location":"visual-studio/versions/","text":"Map Visual Studio Version to Product Name Here is a map from Visual Studio versions to product name. Include (partial) details about supoprted solution format per version Version Product Name Solution Format Supported Solution Format 8 VS 2005 9.0 9 VS 2008 10.0 10 VS 2010 11.0 Up to 12.0 with SP1 11 VS 2012 12 VS 2013 12.0 13 NONE 14 VS 2015 15 VS 2017 16 VS 2019","title":"Versions"},{"location":"visual-studio/versions/#map-visual-studio-version-to-product-name","text":"Here is a map from Visual Studio versions to product name. Include (partial) details about supoprted solution format per version Version Product Name Solution Format Supported Solution Format 8 VS 2005 9.0 9 VS 2008 10.0 10 VS 2010 11.0 Up to 12.0 with SP1 11 VS 2012 12 VS 2013 12.0 13 NONE 14 VS 2015 15 VS 2017 16 VS 2019","title":"Map Visual Studio Version to Product Name"}]}